openapi: 3.0.0
servers: 
  - url: https://api-gamestore.ew.r.appspot.com
info:
  description: This is rastregames api, you can search the stores with your searched game in your city filter by the best price
  version: "1.0.0"
  title: RastreGame
  contact:
    email: juanantonioortizguerra@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: stores
    description: List of game stores
  - name: genre
    description: List of game genres
  - name: storeGame
    description: The price and stock of a specific game in a specific store
paths:
  /stores:
    get:
      tags:
        - stores
      summary: get all stores
      operationId: getAllStores
      description: By passing in the appropriate options, you can search for stores
      parameters:
        - in: query
          name: order
          description: criteria for sorting the stores. it can be name, location, '-name, -location', for the reversed sorting
          schema:
            type: string
        - in: query
          name: name
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: location
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: titleGame
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of stores to return
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: offset
          description: number of stores to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
    post:
      tags:
        - stores
      summary: adds a store
      operationId: addStore
      description: Adds a store to the system
      responses:
        '201':
          description: store created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this store already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        description: Store to add
    put:
      tags:
        - stores
      summary: Update a store
      operationId: updateStore
      responses:
        '201':
          description: store updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
  /stores/{id}:
    get:
      tags:
        - stores
      summary: Returns a store by ID
      operationId: getStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to return
          schema:
            type: string
            example: 's0'
      responses:
        '200':
          description: A Store object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: The specified store ID is invalid
        '404':
          description: A store with the specified ID was not found
    delete:
      tags:
        - stores
      summary: deletes a store with the given ID
      operationId: deleteStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to delete
          schema:
            type: string
            example: 's0'
      responses:
        '200':
          description: Store successfully deleted
        '400':
          description: The specified store ID is invalid
        '404':
          description: A store with the specified ID was not found
    post:
      tags:
        - storeGame
      summary: create a storeGame object and add it to a store
      operationId: addGameStore
      parameters:
        - in: path
          name: id
          required: true
          description: the ID of the store to add the game to
          schema:
            type: string
            example: 's0'
      responses:
        '201':
          description: storeGame created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this storeGame already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreGame'
        description: StoreGame to add
    put:
      tags:
        - storeGame
      summary: Update a storeGame
      operationId: updateStoreGame
      parameters:
        - in: path
          name: id
          required: true
          description: the ID of the store from which to update the storeGame
          schema:
            type: string
            example: 's0'
      responses:
        '201':
          description: storeGame updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreGame'
  
  /stores/{id}/{gameId}:
    delete:
      tags:
        - storeGame
      summary: deletes a game with the given ID from the store with the given ID
      operationId: deleteGameFromStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store from which to remove the game
          schema:
            type: string
            example: 's0'
        - in: path
          name: gameId
          required: true
          description: The ID of the game to remove
          schema:
            type: string
            example: 'g0'
      responses:
        '200':
          description: Game successfully removed
        '400':
          description: The specified game ID or store ID is invalid
        '404':
          description: A game with the specified ID was not found in the store with the specified ID
  /stores/cheapestGames:
    get:
      tags:
        - stores
      summary: get the the stores that sell the specified game the cheapest near the specified location
      operationId: getCheapestGamesInArea
      parameters:
        - in: query
          name: title
          required: true
          description: the game title to look for
          schema:
            type: string
        - in: query
          name: location
          required: true
          description: the location to look close to
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
components:
  schemas:
    Mode:
      type: string
      enum:
      - Individual
      - Cooperativo_local
      - Cooperativo_en_linea
      - Multijugador
      - PvP
    Genre:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
          example: 'gen0'
        name:
          type: string
          example: 'Action'
        description:
          type: string
          example: 'This is a test description'
    Platform:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'gen0'
        name:
          type: string
          example: 'Nintendo Switch'
    Developer:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'gen0'
        name:
          type: string
          example: 'Nintendo'
        year:
          type: integer
          format: year
          example: 2004
        country:
          type: string
          example: 'Japan'
    Game:
      type: object
      required:
        - id
        - title
        - year
        - description
      properties:
        id:
          type: string
          example: 'g0'
        title:
          type: string
          example: 'Super Mario Odyssey'
        description:
          type: string
          example: 'This is a test description for the game'
        year:
          type: integer
          format: year
          minimum: 1952
          example: 2004
        developer:
          $ref: '#/components/schemas/Developer'
        score:
          type: number
          format: double
          minimum: 0.0
          maximum: 10.0
          example: 9.5
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/Platform'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        modes:
          type: array
          items:
            $ref: '#/components/schemas/Mode'
    StoreGame:
      type: object
      required:
        - id
        - storeId
        - game
      properties:
        storeId:
          type: string
          example: 'shop0'
        id:
          type: string
          example: 'sg0'
        game:
          $ref: '#/components/schemas/Game'
        price:
          type: number
          format: double
          minimum: 0.0
          example: 5.5
        stock:
          type: integer
          format: integer32
          minimum: 0
          example: 5
    Store:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'shop0'
        name:
          type: string
          example: 'Game Puerto Real'
        location:
          type: string
          format: address
          example: 'Calle Ruben Maduro, Puerto Real'
        games:
          type: array
          items:
            $ref: '#/components/schemas/StoreGame'
        phone:
          type: string
          format: telephone
          example: '123456789'