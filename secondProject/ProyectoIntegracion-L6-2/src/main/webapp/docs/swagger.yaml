openapi: 3.0.0
servers: 
  - url: https://api-gamestore.ew.r.appspot.com/api
info:
  description: This is rastregames api, you can search the stores with your searched game in your city filter by the best price
  version: "1.0.0"
  title: RastreGame
  contact:
    email: juanantonioortizguerra@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: genres
    description: List of game genres
  - name: platforms
    description: List of game consoles
  - name: developers
    description: List of game developers
  - name: games
    description: List of games
  - name: stores
    description: List of game stores
  
  
paths:
  /genres:
    get:
      tags:
        - genres
      summary: get all genres
      operationId: getAllGenres
      description: By passing in the appropriate options, you can search for genres
      parameters:
        - in: query
          name: order
          required: false
          description: criteria for sorting the stores. it can be name, description, '-name, -description', for the reversed
          schema:
            type: string
        - in: query
          name: q
          required: false
          description: a text parameter to search for in the genre name or the description
          schema:
            type: string
            example: 'adventure'
        - in: query
          name: offset
          description: number of genres to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of genres to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '400':
          description: bad input parameter
    post:
      tags:
        - genres
      summary: Add a new genre
      operationId: addGenre
      description: Create a new Genre
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
        description: genre to add
    put:
      tags:
        - genres
      summary: Update a genre
      operationId: updateGenre
      responses:
        '201':
          description: genre updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
  /genres/{id}:
    get:
      tags:
        - genres
      summary: Returns a genre by ID
      operationId: getGenre
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to return
          schema:
            type: string
            example: 'genre0'
      responses:
        '200':
          description: A Genre object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: The specified genre ID is invalid
        '404':
          description: A genre with the specified ID was not found
    delete:
      tags:
        - genres
      summary: deletes a genre with the given ID
      operationId: deleteGenre
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to return
          schema:
            type: string
            example: 'genre0'
      responses:
        '200':
          description: Genre successfully deleted
        '400':
          description: The specified genre ID is invalid
        '404':
          description: A genre with the specified ID was not found
  /platforms:
    get:
      tags:
        - platforms
      summary: get all platforms
      operationId: getAllPlatforms
      description: By passing in the appropriate options, you can search for platforms
      parameters:
        - in: query
          name: order
          description: criteria for sorting the platforms. it can be name, '-name', for the reversed sorting
          schema:
            type: string
        - in: query
          name: name
          description: a platform name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of platforms to return
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: offset
          description: number of platforms to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platform'
        '400':
          description: bad input parameter
    post:
      tags:
        - platforms
      summary: adds a platform
      operationId: addPlatform
      description: Adds a platform to the system
      responses:
        '201':
          description: platform created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this platform already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Platform'
        description: Platform to add
    put:
      tags:
        - platforms
      summary: Update a platform
      operationId: updatePlatform
      responses:
        '201':
          description: platform updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Platform'
  /platforms/{id}:
    get:
      tags:
        - platforms
      summary: Returns a platform by ID
      operationId: getPlatform
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the platform to return
          schema:
            type: string
            example: 'p0'
      responses:
        '200':
          description: A Platform object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '400':
          description: The specified platform ID is invalid
        '404':
          description: A platform with the specified ID was not found
    delete:
      tags:
        - platforms
      summary: deletes a platform with the given ID
      operationId: deletePlatform
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the platform to delete
          schema:
            type: string
            example: 'p0'
      responses:
        '200':
          description: Platform successfully deleted
        '400':
          description: The specified platform ID is invalid
        '404':
          description: A platform with the specified ID was not found
  /developers:
    get:
      tags:
        - developers
      summary: get all developers
      operationId: getAllDevelopers
      description: By passing in the appropriate options, you can search for developers
      parameters:
        - in: query
          name: order
          description: criteria for sorting the developers. it can be name, year, country, '-name, -year, -country', for the reversed sorting
          schema:
            type: string
        - in: query
          name: name
          description: a developer name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: country
          description: a developer's origin country to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: year
          description: a developer's creation year to use as a filter
          required: false
          schema:
            type: integer
            format: year
        - in: query
          name: limit
          description: maximum number of developers to return
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: offset
          description: number of developers to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
        '400':
          description: bad input parameter
    post:
      tags:
        - developers
      summary: adds a developer
      operationId: addDeveloper
      description: Adds a developer to the system
      responses:
        '201':
          description: developer created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this developer already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Developer'
        description: Developer to add
    put:
      tags:
        - developers
      summary: Update a developer
      operationId: updateDeveloper
      responses:
        '201':
          description: developer updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Developer'
  /developers/{id}:
    get:
      tags:
        - developers
      summary: Returns a developer by ID
      operationId: getDeveloper
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the developer to return
          schema:
            type: string
            example: 'd0'
      responses:
        '200':
          description: A Developer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          description: The specified developer ID is invalid
        '404':
          description: A developer with the specified ID was not found
    delete:
      tags:
        - developers
      summary: deletes a developer with the given ID
      operationId: deleteDeveloper
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the developer to delete
          schema:
            type: string
            example: 'd0'
      responses:
        '200':
          description: Developer successfully deleted
        '400':
          description: The specified developer ID is invalid
        '404':
          description: A developer with the specified ID was not found
  /games:
    get:
      tags:
      - games
      summary: get all games
      description: By passing in the appropriate options, you can search for games
      operationId: getAllGames
      parameters:
      - in: query
        name: order
        description: criteria for sorting the stores. it can be title, year, developerName, score, genreName, '-title, -year, -developerName, -score, -genreName', for the reversed
        required: false
        schema:
          type: string
      - in: query
        name: title
        description: a text parameter to search for in the game title
        required: false
        schema:
          type: string
          example: mario
      - in: query
        name: year
        description: a year to search for in the game year
        required: false
        schema:
          minimum: 0
          type: integer
          format: int32
      - in: query
        name: developerName
        description: a text parameter to search for in the game developer
        required: false
        schema:
          type: string
          example: sega
      - in: query
        name: score
        description: a score parameter to filter by a minimum
        required: false
        schema:
          minimum: 0.0
          maximum: 10.0
          type: number
          format: double
      - in: query
        name: platformName
        description: a text parameter to search for in the game platforms
        required: false
        schema:
          type: string
          example: xbox
      - in: query
        name: genreName
        description: a text parameter to search for in the game genres
        required: false
        schema:
          type: string
          example: adventure
      - in: query
        name: mode
        description: a text parameter to search for in the game modes
        required: false
        schema:
          type: string
          example: pvp
      - in: query
        name: offset
        description: number of games to skip for pagination
        required: false
        schema:
          minimum: 0
          type: integer
          format: int32
      - in: query
        name: limit
        description: maximum number of games to return
        required: false
        schema:
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        "400":
          description: bad input parameter
    put:
      tags:
      - games
      summary: Update a game
      operationId: updateGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        "201":
          description: game updated
        "400":
          description: invalid input, object invalid
    post:
      tags:
      - games
      summary: Add a new game
      description: Create a new Game
      operationId: addGame
      requestBody:
        description: game to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        "201":
          description: game created
        "400":
          description: 'invalid input, object invalid'
        "409":
          description: this game already exists
  /games/{id}:
    get:
      tags:
      - games
      summary: Returns a game by ID
      operationId: getGame
      parameters:
      - in: path
        name: id
        description: The ID of the game to return
        required: true
        schema:
          type: string
          example: 'g0'
      responses:
        "200":
          description: A Game object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        "400":
          description: The specified game ID is invalid
        "404":
          description: A game with the specified ID was not found
    delete:
      tags:
      - games
      summary: deletes a game with the given ID
      operationId: deleteGame
      parameters:
      - in: path
        name: id
        description: The ID of the game to return
        required: true
        schema:
          type: string
          example: 'g0'
      responses:
        "200":
          description: Game successfully deleted
        "400":
          description: The specified game ID is invalid
        "404":
          description: A game with the specified ID was not found
  /stores:
    get:
      tags:
        - stores
      summary: get all stores
      operationId: getAllStores
      description: By passing in the appropriate options, you can search for stores
      parameters:
        - in: query
          name: order
          description: criteria for sorting the stores. it can be name, location, '-name, -location', for the reversed sorting
          schema:
            type: string
        - in: query
          name: name
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: location
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: titleGame
          description: a store name to use as a filter
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of stores to return
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: offset
          description: number of stores to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
    post:
      tags:
        - stores
      summary: adds a store
      operationId: addStore
      description: Adds a store to the system
      responses:
        '201':
          description: store created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this store already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        description: Store to add
    put:
      tags:
        - stores
      summary: Update a store
      operationId: updateStore
      responses:
        '201':
          description: store updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
  /stores/{id}:
    get:
      tags:
        - stores
      summary: Returns a store by ID
      operationId: getStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to return
          schema:
            type: string
            example: 'shop0'
      responses:
        '200':
          description: A Store object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: The specified store ID is invalid
        '404':
          description: A store with the specified ID was not found
    delete:
      tags:
        - stores
      summary: deletes a store with the given ID
      operationId: deleteStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store to delete
          schema:
            type: string
            example: 'shop0'
      responses:
        '200':
          description: Store successfully deleted
        '400':
          description: The specified store ID is invalid
        '404':
          description: A store with the specified ID was not found
    post:
      tags:
        - stores
      summary: create a storeGame object and add it to a store
      operationId: addGameStore
      parameters:
        - in: path
          name: id
          required: true
          description: the ID of the store to add the game to
          schema:
            type: string
            example: 'shop0'
      responses:
        '201':
          description: storeGame created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: this storeGame already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreGame'
        description: StoreGame to add
    put:
      tags:
        - stores
      summary: Update a storeGame
      operationId: updateStoreGame
      parameters:
        - in: path
          name: id
          required: true
          description: the ID of the store from which to update the storeGame
          schema:
            type: string
            example: 'shop0'
      responses:
        '201':
          description: storeGame updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreGame'
  /stores/{id}/{gameId}:
    delete:
      tags:
        - stores
      summary: deletes a game with the given ID from the store with the given ID
      operationId: deleteGameFromStore
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the store from which to remove the game
          schema:
            type: string
            example: 'shop0'
        - in: path
          name: gameId
          required: true
          description: The ID of the game to remove
          schema:
            type: string
            example: 'g0'
      responses:
        '200':
          description: Game successfully removed
        '400':
          description: The specified game ID or store ID is invalid
        '404':
          description: A game with the specified ID was not found in the store with the specified ID
  /stores/cheapestGames:
    get:
      tags:
        - stores
      summary: get the the stores that sell the specified game the cheapest near the specified location
      operationId: getCheapestGamesInArea
      parameters:
        - in: query
          name: title
          required: true
          description: the game title to look for
          schema:
            type: string
        - in: query
          name: location
          required: true
          description: the location to look close to
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '400':
          description: bad input parameter
  
components:
  schemas:
    Mode:
      type: string
      enum:
      - Individual
      - Cooperativo_local
      - Cooperativo_en_linea
      - Multijugador
      - PvP
    Genre:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
          example: 'genre0'
        name:
          type: string
          example: 'Action'
        description:
          type: string
          example: 'This is a test description'
    Platform:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'p0'
        name:
          type: string
          example: 'Nintendo Switch'
    Developer:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'd0'
        name:
          type: string
          example: 'Nintendo'
        year:
          type: integer
          format: year
          example: 2004
        country:
          type: string
          example: 'Japan'
    Game:
      type: object
      required:
        - id
        - title
        - year
        - description
      properties:
        id:
          type: string
          example: 'g0'
        title:
          type: string
          example: 'Super Mario Odyssey'
        description:
          type: string
          example: 'This is a test description for the game'
        year:
          type: integer
          format: year
          minimum: 1952
          example: 2004
        developer:
          $ref: '#/components/schemas/Developer'
        score:
          type: number
          format: double
          minimum: 0.0
          maximum: 10.0
          example: 9.5
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/Platform'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        modes:
          type: array
          items:
            $ref: '#/components/schemas/Mode'
    StoreGame:
      type: object
      required:
        - id
        - storeId
        - game
      properties:
        storeId:
          type: string
          example: 'shop0'
        id:
          type: string
          example: 'sg0'
        game:
          $ref: '#/components/schemas/Game'
        price:
          type: number
          format: double
          minimum: 0.0
          example: 5.5
        stock:
          type: integer
          format: integer32
          minimum: 0
          example: 5
    Store:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 'shop0'
        name:
          type: string
          example: 'Game Puerto Real'
        location:
          type: string
          format: address
          example: 'Calle Ruben Maduro, Puerto Real'
        games:
          type: array
          items:
            $ref: '#/components/schemas/StoreGame'
        phone:
          type: string
          format: telephone
          example: '123456789'